[
  {
    "categoryName": "Basics",
    "snippets": [
        {
          "title": "Hello, World!",
          "description": "Prints Hello, World! to the terminal.",
          "code": [
            "fn main() { // Defines the main running function",
            "    println!(\"Hello, World!\"); // Prints Hello, World! to the terminal.",
            "}"
          ],
          "tags": ["rust", "printing", "hello-world", "utility"],
          "author": "James-Beans"
        }
      ]
  },
  {
    "categoryName": "String Manipulation",
    "snippets": [
      {
        "title": "Capitalize String",
        "description": "Makes the first letter of a string uppercase.",
        "code": [
          "fn capitalized(str: &str) -> String {",
          "    let mut chars = str.chars();",
          "    match chars.next() {",
          "        None => String::new(),",
          "        Some(f) => f.to_uppercase().chain(chars).collect(),",
          "    }",
          "}",
          "",
          "// Usage:",
          "assert_eq!(capitalized(\"lower_case\"), \"Lower_case\")"
        ],
        "tags": ["rust", "string", "capitalize", "utility"],
        "author": "Mathys-Gasnier"
      }
    ]
  },
  {
    "categoryName": "File Handling",
    "snippets": [
      {
        "title": "Read File Lines",
        "description": "Reads all lines from a file and returns them as a vector of strings.",
        "code": [
          "fn read_lines(file_name: &str) -> std::io::Result<Vec<String>>",
          "    Ok(",
          "        std::fs::read_to_string(file_name)?",
          "            .lines()",
          "            .map(String::from)",
          "            .collect()",
          "    )",
          "}",
          "",
          "// Usage:",
          "let lines = read_lines(\"path/to/file.txt\").expect(\"Failed to read lines from file\")"
        ],
        "tags": ["rust", "file", "read", "utility"],
        "author": "Mathys-Gasnier"
      },
      {
        "title": "Find Files",
        "description": "Finds all files of the specified extension within a given directory.",
        "code": [
          "fn find_files(directory: &str, file_type: &str) -> std::io::Result<Vec<std::path::PathBuf>> {",
          "    let mut result = vec![];",
          "",
          "    for entry in std::fs::read_dir(directory)? {",
          "        let dir = entry?;",
          "        let path = dir.path();",
          "        if dir.file_type().is_ok_and(|t| !t.is_file()) &&",
          "            path.extension().is_some_and(|ext| ext != file_type) {",
          "            continue;",
          "        }",
          "        result.push(path)",
          "    }",
          "",
          "    Ok(result)",
          "}",
          "",
          "// Usage:",
          "let files = find_files(\"/path/to/your/directory\", \".pdf\")"
        ],
        "tags": ["rust", "file", "search"],
        "author": "Mathys-Gasnier"
      }
    ]
  }
]
