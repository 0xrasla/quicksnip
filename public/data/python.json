[
  {
    "categoryName": "String Manipulation",
    "snippets": [
      {
        "title": "Reverse String",
        "description": "Reverses the characters in a string.",
        "code": [
          "def reverse_string(s):",
          "    return s[::-1]",
          "",
          "# Usage:",
          "print(reverse_string('hello'))  # Output: 'olleh'"
        ],
        "tags": ["python", "string", "reverse", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Check Palindrome",
        "description": "Checks if a string is a palindrome.",
        "code": [
          "def is_palindrome(s):",
          "    s = s.lower().replace(' ', '')",
          "    return s == s[::-1]",
          "",
          "# Usage:",
          "print(is_palindrome('A man a plan a canal Panama'))  # Output: True"
        ],
        "tags": ["python", "string", "palindrome", "utility"],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "categoryName": "List Manipulation",
    "snippets": [
      {
        "title": "Flatten Nested List",
        "description": "Flattens a multi-dimensional list into a single list.",
        "code": [
          "def flatten_list(lst):",
          "    return [item for sublist in lst for item in sublist]",
          "",
          "# Usage:",
          "nested_list = [[1, 2], [3, 4], [5]]",
          "print(flatten_list(nested_list))  # Output: [1, 2, 3, 4, 5]"
        ],
        "tags": ["python", "list", "flatten", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Flatten Unevenly Nested Lists",
        "description": "Converts unevenly nested lists of any depth into a single flat list.",
        "code": [
          "def flatten(nested_list):",
          "    \"\"\"",
          "    Flattens unevenly nested lists of any depth into a single flat list.",
          "    \"\"\"",
          "    for item in nested_list:",
          "        if isinstance(item, list):",
          "            yield from flatten(item)",
          "        else:",
          "            yield item",
          "",
          "# Usage:",
          "nested_list = [1, [2, [3, 4]], 5]",
          "flattened = list(flatten(nested_list))",
          "print(flattened)  # Output: [1, 2, 3, 4, 5]"
        ],
        "tags": [
          "python",
          "list",
          "flattening",
          "nested-lists",
          "depth",
          "utilities"
        ],
        "author": "agilarasu"
      },
      {
        "title": "Remove Duplicates",
        "description": "Removes duplicate elements from a list while maintaining order.",
        "code": [
          "def remove_duplicates(lst):",
          "    return list(dict.fromkeys(lst))",
          "",
          "# Usage:",
          "print(remove_duplicates([1, 2, 2, 3, 4, 4, 5]))  # Output: [1, 2, 3, 4, 5]"
        ],
        "tags": ["python", "list", "duplicates", "utility"],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "categoryName": "File Handling",
    "snippets": [
      {
        "title": "Read File Lines",
        "description": "Reads all lines from a file and returns them as a list.",
        "code": [
          "def read_file_lines(filepath):",
          "    with open(filepath, 'r') as file:",
          "        return file.readlines()",
          "",
          "# Usage:",
          "lines = read_file_lines('example.txt')",
          "print(lines)"
        ],
        "tags": ["python", "file", "read", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Write to File",
        "description": "Writes content to a file.",
        "code": [
          "def write_to_file(filepath, content):",
          "    with open(filepath, 'w') as file:",
          "        file.write(content)",
          "",
          "# Usage:",
          "write_to_file('example.txt', 'Hello, World!')"
        ],
        "tags": ["python", "file", "write", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Find Files",
        "description": "Finds all files of the specified type within a given directory.",
        "code": [
          "import os",
          "",
          "def find_files(directory, file_type):",
          "    file_type = file_type.lower()",
          "    found_files = []",
          "",
          "    for entry in os.scandir(directory):",
          "        if entry.is_file() and entry.name.lower().endswith(file_type):",
          "            found_files.append(entry.name)",
          "    return found_files",
          "",
          "# Example Usage:",
          "pdf_files = find_files('/path/to/your/directory', '.pdf')",
          "print(pdf_files)"
        ],
        "tags": ["python", "os", "filesystem", "file_search"],
        "author": "Jackeastern"
      }
    ]
  },
  {
    "categoryName": "Math and Numbers",
    "snippets": [
      {
        "title": "Find Factorial",
        "description": "Calculates the factorial of a number.",
        "code": [
          "def factorial(n):",
          "    if n == 0:",
          "        return 1",
          "    return n * factorial(n - 1)",
          "",
          "# Usage:",
          "print(factorial(5))  # Output: 120"
        ],
        "tags": ["python", "math", "factorial", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Check Prime Number",
        "description": "Checks if a number is a prime number.",
        "code": [
          "def is_prime(n):",
          "    if n <= 1:",
          "        return False",
          "    for i in range(2, int(n**0.5) + 1):",
          "        if n % i == 0:",
          "            return False",
          "    return True",
          "",
          "# Usage:",
          "print(is_prime(17))  # Output: True"
        ],
        "tags": ["python", "math", "prime", "check"],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "categoryName": "Utilities",
    "snippets": [
      {
        "title": "Measure Execution Time",
        "description": "Measures the execution time of a code block.",
        "code": [
          "import time",
          "",
          "def measure_time(func, *args):",
          "    start = time.time()",
          "    result = func(*args)",
          "    end = time.time()",
          "    print(f'Execution time: {end - start:.6f} seconds')",
          "    return result",
          "",
          "# Usage:",
          "def slow_function():",
          "    time.sleep(2)",
          "",
          "measure_time(slow_function)"
        ],
        "tags": ["python", "time", "execution", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Generate Random String",
        "description": "Generates a random alphanumeric string.",
        "code": [
          "import random",
          "import string",
          "",
          "def random_string(length):",
          "    letters_and_digits = string.ascii_letters + string.digits",
          "    return ''.join(random.choice(letters_and_digits) for _ in range(length))",
          "",
          "# Usage:",
          "print(random_string(10))  # Output: Random 10-character string"
        ],
        "tags": ["python", "random", "string", "utility"],
        "author": "dostonnabotov"
      }
    ]
  }
]
