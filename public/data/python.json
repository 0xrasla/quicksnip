[
  {
    "categoryName": "Basics",
    "snippets": [
      {
        "title": "Hello, World!",
        "description": "Prints Hello, World! to the terminal.",
        "code": [
          "print(\"Hello, World!\") # Prints Hello, World! to the terminal."
        ],
        "tags": ["python", "printing", "hello-world", "utility"],
        "author": "James-Beans"
      }
    ]
  },  
  {
    "categoryName": "String Manipulation",
    "snippets": [
      {
        "title": "Reverse String",
        "description": "Reverses the characters in a string.",
        "code": [
          "def reverse_string(s):",
          "    return s[::-1]",
          "",
          "# Usage:",
          "print(reverse_string('hello'))  # Output: 'olleh'"
        ],
        "tags": ["python", "string", "reverse", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Check Palindrome",
        "description": "Checks if a string is a palindrome.",
        "code": [
          "def is_palindrome(s):",
          "    s = s.lower().replace(' ', '')",
          "    return s == s[::-1]",
          "",
          "# Usage:",
          "print(is_palindrome('A man a plan a canal Panama'))  # Output: True"
        ],
        "tags": ["python", "string", "palindrome", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Count Vowels",
        "description": "Counts the number of vowels in a string.",
        "code": [
          "def count_vowels(s):",
          "    vowels = 'aeiou'",
          "    return len([char for char in s.lower() if char in vowels])",
          "",
          "# Usage:",
          "print(count_vowels('hello'))  # Output: 2"
        ],
        "tags": ["python", "string", "vowels", "count", "utility"],
        "author": "SteliosGee"
      },
      {
        "title": "Check Anagram",
        "description": "Checks if two strings are anagrams of each other.",
        "code": [
          "def is_anagram(s1, s2):",
          "    return sorted(s1) == sorted(s2)",
          "",
          "# Usage:",
          "print(is_anagram('listen', 'silent'))  # Output: True"
        ],
        "tags": ["python", "string", "anagram", "check", "utility"],
        "author": "SteliosGee"
      },
      {
        "title": "Remove Punctuation",
        "description": "Removes punctuation from a string.",
        "code": [
          "import string",
          "",
          "def remove_punctuation(s):",
          "    return s.translate(str.maketrans('', '', string.punctuation))",
          "",
          "# Usage:",
          "print(remove_punctuation('Hello, World!'))  # Output: 'Hello World'"
        ],
        "tags": ["python", "string", "punctuation", "remove", "utility"],
        "author": "SteliosGee"
      }
    ]
  },
  {
    "categoryName": "List Manipulation",
    "snippets": [
      {
        "title": "Flatten Nested List",
        "description": "Flattens a multi-dimensional list into a single list.",
        "code": [
          "def flatten_list(lst):",
          "    return [item for sublist in lst for item in sublist]",
          "",
          "# Usage:",
          "nested_list = [[1, 2], [3, 4], [5]]",
          "print(flatten_list(nested_list))  # Output: [1, 2, 3, 4, 5]"
        ],
        "tags": ["python", "list", "flatten", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Flatten Unevenly Nested Lists",
        "description": "Converts unevenly nested lists of any depth into a single flat list.",
        "code": [
          "def flatten(nested_list):",
          "    \"\"\"",
          "    Flattens unevenly nested lists of any depth into a single flat list.",
          "    \"\"\"",
          "    for item in nested_list:",
          "        if isinstance(item, list):",
          "            yield from flatten(item)",
          "        else:",
          "            yield item",
          "",
          "# Usage:",
          "nested_list = [1, [2, [3, 4]], 5]",
          "flattened = list(flatten(nested_list))",
          "print(flattened)  # Output: [1, 2, 3, 4, 5]"
        ],
        "tags": [
          "python",
          "list",
          "flattening",
          "nested-lists",
          "depth",
          "utilities"
        ],
        "author": "agilarasu"
      },
      {
        "title": "Remove Duplicates",
        "description": "Removes duplicate elements from a list while maintaining order.",
        "code": [
          "def remove_duplicates(lst):",
          "    return list(dict.fromkeys(lst))",
          "",
          "# Usage:",
          "print(remove_duplicates([1, 2, 2, 3, 4, 4, 5]))  # Output: [1, 2, 3, 4, 5]"
        ],
        "tags": ["python", "list", "duplicates", "utility"],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "categoryName": "File Handling",
    "snippets": [
      {
        "title": "Read File Lines",
        "description": "Reads all lines from a file and returns them as a list.",
        "code": [
          "def read_file_lines(filepath):",
          "    with open(filepath, 'r') as file:",
          "        return file.readlines()",
          "",
          "# Usage:",
          "lines = read_file_lines('example.txt')",
          "print(lines)"
        ],
        "tags": ["python", "file", "read", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Write to File",
        "description": "Writes content to a file.",
        "code": [
          "def write_to_file(filepath, content):",
          "    with open(filepath, 'w') as file:",
          "        file.write(content)",
          "",
          "# Usage:",
          "write_to_file('example.txt', 'Hello, World!')"
        ],
        "tags": ["python", "file", "write", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Find Files",
        "description": "Finds all files of the specified type within a given directory.",
        "code": [
          "import os",
          "",
          "def find_files(directory, file_type):",
          "  file_type = file_type.lower()  # Convert file_type to lowercase",
          "  found_files = []",
          "",
          "  for root, _, files in os.walk(directory):",
          "    for file in files:",
          "      file_ext = os.path.splitext(file)[1].lower()",
          "      if file_ext == file_type:",
          "        full_path = os.path.join(root, file)",
          "        found_files.append(full_path)",
          "",
          "  return found_files",
          "",
          "# Example Usage:",
          "pdf_files = find_files('/path/to/your/directory', '.pdf')",
          "print(pdf_files)"
        ],
        "tags": ["python", "os", "filesystem", "file_search"],
        "author": "Jackeastern"
      }
    ]
  },
  {
    "categoryName": "Math and Numbers",
    "snippets": [
      {
        "title": "Find Factorial",
        "description": "Calculates the factorial of a number.",
        "code": [
          "def factorial(n):",
          "    if n == 0:",
          "        return 1",
          "    return n * factorial(n - 1)",
          "",
          "# Usage:",
          "print(factorial(5))  # Output: 120"
        ],
        "tags": ["python", "math", "factorial", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Check Prime Number",
        "description": "Checks if a number is a prime number.",
        "code": [
          "def is_prime(n):",
          "    if n <= 1:",
          "        return False",
          "    for i in range(2, int(n**0.5) + 1):",
          "        if n % i == 0:",
          "            return False",
          "    return True",
          "",
          "# Usage:",
          "print(is_prime(17))  # Output: True"
        ],
        "tags": ["python", "math", "prime", "check"],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "categoryName": "Utilities",
    "snippets": [
      {
        "title": "Measure Execution Time",
        "description": "Measures the execution time of a code block.",
        "code": [
          "import time",
          "",
          "def measure_time(func, *args):",
          "    start = time.time()",
          "    result = func(*args)",
          "    end = time.time()",
          "    print(f'Execution time: {end - start:.6f} seconds')",
          "    return result",
          "",
          "# Usage:",
          "def slow_function():",
          "    time.sleep(2)",
          "",
          "measure_time(slow_function)"
        ],
        "tags": ["python", "time", "execution", "utility"],
        "author": "dostonnabotov"
      },
      {
        "title": "Generate Random String",
        "description": "Generates a random alphanumeric string.",
        "code": [
          "import random",
          "import string",
          "",
          "def random_string(length):",
          "    letters_and_digits = string.ascii_letters + string.digits",
          "    return ''.join(random.choice(letters_and_digits) for _ in range(length))",
          "",
          "# Usage:",
          "print(random_string(10))  # Output: Random 10-character string"
        ],
        "tags": ["python", "random", "string", "utility"],
        "author": "dostonnabotov"
      }
    ]
  },
  {
    "categoryName": "JSON Manipulation",
    "snippets": [
      {
        "title": "Read JSON File",
        "description": "Reads a JSON file and parses its content.",
        "code": [
          "import json",
          "",
          "def read_json(filepath):",
          "    with open(filepath, 'r') as file:",
          "        return json.load(file)",
          "",
          "# Usage:",
          "data = read_json('data.json')",
          "print(data)"
        ],
        "tags": ["python", "json", "file", "read"],
        "author": "e3nviction"
      },
      {
        "title": "Write JSON File",
        "description": "Writes a dictionary to a JSON file.",
        "code": [
          "import json",
          "",
          "def write_json(filepath, data):",
          "    with open(filepath, 'w') as file:",
          "        json.dump(data, file, indent=4)",
          "",
          "# Usage:",
          "data = {'name': 'John', 'age': 30}",
          "write_json('data.json', data)"
        ],
        "tags": ["python", "json", "file", "write"],
        "author": "e3nviction"
      }
    ]
  },
  {
    "categoryName": "SQLite Database",
    "snippets": [
      {
        "title": "Create SQLite Database Table",
        "description": "Creates a table in an SQLite database with a dynamic schema.",
        "code": [
          "import sqlite3",
          "",
          "def create_table(db_name, table_name, schema):",
          "    conn = sqlite3.connect(db_name)",
          "    cursor = conn.cursor()",
          "    schema_string = ', '.join([f'{col} {dtype}' for col, dtype in schema.items()])",
          "    cursor.execute(f'''",
          "        CREATE TABLE IF NOT EXISTS {table_name} (",
          "            {schema_string}",
          "        )''')",
          "    conn.commit()",
          "    conn.close()",
          "",
          "# Usage:",
          "db_name = 'example.db'",
          "table_name = 'users'",
          "schema = {",
          "    'id': 'INTEGER PRIMARY KEY',",
          "    'name': 'TEXT',",
          "    'age': 'INTEGER',",
          "    'email': 'TEXT'",
          "}",
          "create_table(db_name, table_name, schema)"
        ],
        "tags": ["python", "sqlite", "database", "table"],
        "author": "e3nviction"
      },
      {
        "title": "Insert Data into Sqlite Table",
        "description": "Inserts a row into a specified SQLite table using a dictionary of fields and values.",
        "code": [
          "import sqlite3",
          "",
          "def insert_into_table(db_path, table_name, data):",
          "    with sqlite3.connect(db_path) as conn:",
          "        columns = ', '.join(data.keys())",
          "        placeholders = ', '.join(['?'] * len(data))",
          "        sql = f\"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})\"",
          "        conn.execute(sql, tuple(data.values()))",
          "        conn.commit()",
          "",
          "# Usage:",
          "db_path = 'example.db'",
          "table_name = 'users'",
          "data = {",
          "    'name': 'John Doe',",
          "    'email': 'john@example.com',",
          "    'age': 30",
          "}",
          "insert_into_table(db_path, table_name, data)"
        ],
        "tags": ["python", "sqlite", "database", "utility"],
        "author": "e3nviction"
      }
    ]
  },
  {
    "categoryName": "Error Handling",
    "snippets": [
      {
        "title": "Safe Division",
        "description": "Performs division with error handling.",
        "code": [
          "def safe_divide(a, b):",
          "    try:",
          "        return a / b",
          "    except ZeroDivisionError:",
          "        return 'Cannot divide by zero!'",
          "",
          "# Usage:",
          "print(safe_divide(10, 2))  # Output: 5.0",
          "print(safe_divide(10, 0))  # Output: 'Cannot divide by zero!'"
        ],
        "tags": ["python", "error-handling", "division", "utility"],
        "author": "e3nviction"
      }
    ]
  },
  {
    "categoryName": "Datetime Utilities",
    "snippets": [
      {
        "title": "Get Current Date and Time String",
        "description": "Fetches the current date and time as a formatted string.",
        "code": [
          "from datetime import datetime",
          "",
          "def get_current_datetime_string():",
          "    return datetime.now().strftime('%Y-%m-%d %H:%M:%S')",
          "",
          "# Usage:",
          "print(get_current_datetime_string())  # Output: '2023-01-01 12:00:00'"
        ],
        "tags": ["python", "datetime", "utility"],
        "author": "e3nviction"
      },
      {
        "title": "Calculate Date Difference in Milliseconds",
        "description": "Calculates the difference between two dates in milliseconds.",
        "code": [
          "from datetime import datetime",
          "",
          "def date_difference_in_millis(date1, date2):",
          "    delta = date2 - date1",
          "    return delta.total_seconds() * 1000",
          "",
          "# Usage:",
          "d1 = datetime(2023, 1, 1, 12, 0, 0)",
          "d2 = datetime(2023, 1, 1, 12, 1, 0)",
          "print(date_difference_in_millis(d1, d2))"
        ],
        "tags": ["python", "datetime", "utility"],
        "author": "e3nviction"
      }
    ]
  }
]
