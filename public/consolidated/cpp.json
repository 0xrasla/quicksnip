[
    {
        "categoryName": "Array Manipulation",
        "snippets": [
            {
                "title": "Filter Vector",
                "description": "Filters a vector using a predicate function.",
                "author": "majvax",
                "tags": [
                    "array",
                    "filter",
                    "c++23"
                ],
                "contributors": [],
                "code": "#include <ranges>\n#include <vector>\n\ntemplate <typename T, typename P>\nauto filter(const std::vector<T>& vec, P&& predicate) {\n    return vec\n        | std::views::filter(std::forward<P>(predicate))\n        | std::ranges::to<std::vector<T>>();\n}\n\n\n\n// Usage:\nstd::vector<int> vec = {1, 2, 3, 4, 5};\nstd::vector<int> filtered = filter(vec, [](int i){ return i % 2 == 0; });\n// filtered contains 2 and 4\n"
            },
            {
                "title": "Transform Vector",
                "description": "Transforms a vector using a function.",
                "author": "majvax",
                "tags": [
                    "array",
                    "transform",
                    "c++23"
                ],
                "contributors": [],
                "code": "#include <ranges>\n#include <vector>\n\ntemplate <typename T, typename F>\nauto transform(const std::vector<T>& vec, F&& transformer) {\n    using U = std::invoke_result_t<F, T>;\n    return vec\n        | std::views::transform(std::forward<F>(transformer))\n        | std::ranges::to<std::vector<U>>();\n}\n\n\n\n// Usage:\nstd::vector<int> vec = {1, 2, 3, 4, 5};\nstd::vector<int> transformed = transform(vec, [](int i){ return i * 2; });\n// transformed contains 2, 4, 6, 8, 10\n"
            }
        ]
    },
    {
        "categoryName": "Basics",
        "snippets": [
            {
                "title": "Hello, World!",
                "description": "Prints Hello, World! to the terminal.",
                "author": "James-Beans",
                "tags": [
                    "printing",
                    "hello-world"
                ],
                "contributors": [],
                "code": "#include <iostream> // Includes the input/output stream library\n\nint main() { // Defines the main function\n    std::cout << \"Hello, World!\" << std::endl; // Outputs Hello, World! and a newline\n    return 0; // indicate the program executed successfully\n}\n"
            }
        ]
    },
    {
        "categoryName": "Data Structure Conversion",
        "snippets": [
            {
                "title": "Vector to Queue",
                "description": "Convert vector into queue quickly",
                "author": "mrityunjay2003",
                "tags": [
                    "data structures",
                    "queue",
                    "vector"
                ],
                "contributors": [],
                "code": "#include<queue>\n#include<vector>\n#include<deque>\n\nstd::queue<int> vectorToQueue(const std::vector<int>& v) {\n    return std::queue<int>(std::deque<int>(v.begin(), v.end()));\n}\n\nstd::vector<int> vec = { 1, 2, 3, 4, 5 };\nvectorToQueue(&vec); // Returns: std::queue<int> { 1, 2, 3, 4, 5 }\n"
            }
        ]
    },
    {
        "categoryName": "Debuging",
        "snippets": [
            {
                "title": "Vector Print",
                "description": "Overloads the << operator to print the contents of a vector just like in python.",
                "author": "Mohamed-faaris",
                "tags": [
                    "printing",
                    "debuging",
                    "vector"
                ],
                "contributors": [],
                "code": "#include <iostream> \n#include <vector>   \n\ntemplate <typename T>\nstd::ostream& operator<<(std::ostream& os, const std::vector<T>& vec) {\n    os << \"[\"; \n    for (size_t i = 0; i < vec.size(); ++i) {\n        os << vec[i]; // Print each vector element\n        if (i != vec.size() - 1) {\n            os << \", \"; // Add separator\n        }\n    }\n    os << \"]\"; \n    return os; // Return the stream\n}\n\n// Usage:\nstd::vector<int> numbers = {1, 2, 3, 4, 5};\nstd::cout << numbers << std::endl; // Outputs: [1, 2, 3, 4, 5]\n\n"
            }
        ]
    },
    {
        "categoryName": "File Handling",
        "snippets": [
            {
                "title": "Find files recursively",
                "description": "Find all the files in a directory and subdirectories using a predicate function.",
                "author": "majvax",
                "tags": [
                    "filesystem",
                    "file_search",
                    "c++17"
                ],
                "contributors": [],
                "code": "#include <filesystem>\n#include <vector>\n#include <string>\n\ntemplate <typename P>\nstd::vector<std::filesystem::path> find_files_recursive(const std::string& path, P&& predicate) {\n    std::vector<std::filesystem::path> files;\n    std::error_code ec;\n\n    if (!std::filesystem::exists(path, ec) || ec)\n        return files;\n    if (!std::filesystem::is_directory(path, ec) || ec)\n        return files;\n\n    auto it = std::filesystem::recursive_directory_iterator(path, ec);\n    if (ec)\n        return files;\n\n    for (const auto& entry : it)\n        if (!std::filesystem::is_directory(entry) && predicate(entry.path()))\n            files.push_back(entry.path());\n\n    return files;\n}\n\n\n\n// Usage:\n\n// Find all files with size greater than 10MB\nauto files = find_files_recursive(\"Path\", [](const auto& p) {\n    return std::filesystem::file_size(p) > 10 * 1024 * 1024;\n});\n\n// Find all files with \".pdf\" as extension\nauto files = find_files_recursive(\"Path\", [](const auto& p) {\n    return p.extension() == \".pdf\";\n});\n\n// Find all files writed after The New Year\n#include <chrono>\n// need std=c++20\nauto jan_1_2025 = std::filesystem::file_time_type::clock::from_sys(\n    std::chrono::sys_days{std::chrono::year{2025}/std::chrono::month{1}/std::chrono::day{1}}\n);\nauto files = find_files_recursive(\"Path\", [jan_1_2025](const auto& p) {\n    return std::filesystem::last_write_time(p) > jan_1_2025;\n}),\n"
            },
            {
                "title": "Find files",
                "description": "Find all the files in a directory using a predicate function.",
                "author": "majvax",
                "tags": [
                    "filesystem",
                    "file_search",
                    "c++17"
                ],
                "contributors": [],
                "code": "#include <filesystem>\n#include <vector>\n#include <string>\n\ntemplate <typename P>\nstd::vector<std::filesystem::path> find_files(const std::string& path, P&& predicate) {\n    std::vector<std::filesystem::path> files;\n    std::error_code ec;\n\n    if (!std::filesystem::exists(path, ec) || ec)\n        return files;\n    if (!std::filesystem::is_directory(path, ec) || ec)\n        return files;\n\n    auto it = std::filesystem::directory_iterator(path, ec);\n    if (ec)\n        return files;\n\n    for (const auto& entry : it)\n        if (!std::filesystem::is_directory(entry) && predicate(entry.path()))\n            files.push_back(entry.path());\n\n    return files;\n}\n\n\n\n// Usage:\n\n// Find all files with size greater than 10MB\nauto files = find_files(\"Path\", [](const auto& p) {\n    return std::filesystem::file_size(p) > 10 * 1024 * 1024;\n});\n\n// Find all files with \".pdf\" as extension\nauto files = find_files(\"Path\", [](const auto& p) {\n    return p.extension() == \".pdf\";\n});\n\n// Find all files writed after The New Year\n#include <chrono>\n// need std=c++20\nauto jan_1_2025 = std::filesystem::file_time_type::clock::from_sys(\n    std::chrono::sys_days{std::chrono::year{2025}/std::chrono::month{1}/std::chrono::day{1}}\n);\nauto files = find_files(\"Path\", [jan_1_2025](const auto& p) {\n    return std::filesystem::last_write_time(p) > jan_1_2025;\n}),\n"
            },
            {
                "title": "List Directories",
                "description": "Lists all the directories in a path.",
                "author": "majvax",
                "tags": [
                    "filesystem",
                    "directories",
                    "c++17"
                ],
                "contributors": [],
                "code": "#include <filesystem>\n#include <vector>\n#include <string>\n\nstd::vector<std::filesystem::path> list_directories(const std::string& path) {\n    std::vector<std::filesystem::path> files;\n    std::error_code ec;\n\n    if (!std::filesystem::exists(path, ec) || ec)\n        return files;\n    if (!std::filesystem::is_directory(path, ec) || ec)\n        return files;\n\n    auto it = std::filesystem::directory_iterator(path, ec);\n    if (ec)\n        return files;\n\n    for (const auto& entry : it)\n        if (std::filesystem::is_directory(entry))\n            files.push_back(entry.path());\n\n    return files;\n}\n\n\n\n// Usage:\nauto directories = list_directories(\"Path\");\n"
            }
        ]
    },
    {
        "categoryName": "Math And Numbers",
        "snippets": [
            {
                "title": "Check Prime Number",
                "description": "Check if an integer is a prime number",
                "author": "MihneaMoso",
                "tags": [
                    "number",
                    "prime"
                ],
                "contributors": [],
                "code": "bool is_prime(int n) {\n    if (n < 2) return false;\n    if (n == 2 || n == 3) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Usage:\nis_prime(29); // Returns: true\n"
            }
        ]
    },
    {
        "categoryName": "String Manipulation",
        "snippets": [
            {
                "title": "Filter",
                "description": "Filter a string with a predicate function",
                "author": "majvax",
                "tags": [
                    "string",
                    "filtering",
                    "c++23"
                ],
                "contributors": [],
                "code": "#include <ranges>\n#include <string>\n\ntemplate <typename P>\nstd::string filter(const std::string& str, P&& predicate) {\n    return str\n        | std::ranges::views::filter(std::forward<P>(predicate))\n        | std::ranges::to<std::string>();\n}\n\n\n\n// Usage:\nstd::string str = \"Hello, World!\";\nstd::string filtered = filter(str, [](char c){ return std::isalpha(c); });\nstd::cout << filtered << std::endl; // HelloWorld\n"
            },
            {
                "title": "Palindrome",
                "description": "Check if a string is a palindrome or not.",
                "author": "majvax",
                "tags": [
                    "string",
                    "c++23"
                ],
                "contributors": [],
                "code": "#include <string>\n#include <ranges>\n#include <algorithm>\n\nbool is_palindrome(const std::string& str) {\n    std::string sanitized_string = str\n        | std::ranges::views::filter([](char c){ return std::isalnum(c); })\n        | std::ranges::views::transform([](char c){ return std::tolower(c); })\n        | std::ranges::to<std::string>();\n    \n    return std::ranges::equal(sanitized_string, sanitized_string | std::views::reverse);\n}\n\n\n\n// Usage:\nbool pal = is_palindrome(\"A man, a plan, a canal, Panama\"); // true\n"
            },
            {
                "title": "Reverse String",
                "description": "Reverses the characters in a string.",
                "author": "Vaibhav-kesarwani",
                "tags": [
                    "array",
                    "reverse",
                    "c++23"
                ],
                "contributors": [],
                "code": "#include <string>\n#include <algorithm>\n\nstd::string reverseString(const std::string& input) {\n    std::string reversed = input;\n    std::reverse(reversed.begin(), reversed.end());\n    return reversed;\n}\n\nreverseString(\"quicksnip\"); // Returns: \"pinskciuq\"\n"
            },
            {
                "title": "Split String",
                "description": "Splits a string by a delimiter",
                "author": "saminjay",
                "tags": [
                    "string",
                    "split"
                ],
                "contributors": [],
                "code": "#include <string>\n#include <vector>\n\nstd::vector<std::string> split_string(std::string str, std::string delim) {\n    std::vector<std::string> splits;\n    int i = 0, j;\n    int inc = delim.length();\n    while (j != std::string::npos) {\n        j = str.find(delim, i);\n        splits.push_back(str.substr(i, j - i));\n        i = j + inc;\n    }\n    return splits;\n}\n\n// Usage:\nsplit_string(\"quick_-snip\", \"_-\"); // Returns: std::vector<std::string> { \"quick\", \"snip\" }\n"
            },
            {
                "title": "Transform",
                "description": "Transform a string with a function",
                "author": "majvax",
                "tags": [
                    "string",
                    "transform",
                    "c++23"
                ],
                "contributors": [],
                "code": "#include <ranges>\n#include <string>\n\ntemplate <typename F>\nstd::string transform(const std::string& str, F&& transformer) {\n    return str\n        | std::ranges::views::transform(std::forward<F>(transformer))\n        | std::ranges::to<std::string>();\n}\n\n\n\n// Usage:\nstd::string str = \"Hello, World!\";\nstd::string transformed = transform(str, [](char c){ return std::toupper(c); });\nstd::cout << transformed << std::endl; // HELLO, WORLD!\n"
            }
        ]
    }
]